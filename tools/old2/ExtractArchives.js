import { ByteBuffer } from 'utility.js';
import { FileArchive } from '../src/util/FileArchive.js';
import fs from 'fs';

ByteBuffer.setGlobalEndianness(false);
ByteBuffer.setGlobalTerminator('\n');

export function extractArchives() {
    const FILE_HASH_NAMES = [
        'param.dat',
        'param.idx',
        'mes.dat',
        'mes.idx',
        'mesanim.dat',
        'mesanim.idx',
        'p11_full.dat',
        'index.dat',
        'p12_full.dat',
        'b12_full.dat',
        'q8_full.dat',
        'title.dat',
        'logo.dat',
        'titlebox.dat',
        'titlebutton.dat',
        'runes.dat',
        'seq.dat',
        'loc.dat',
        'loc.idx',
        'flo.dat',
        'obj.dat',
        'obj.idx',
        'npc.dat',
        'npc.idx',
        'idk.dat',
        'spotanim.dat',
        'varp.dat',
        'varbit.dat',
        'data',
        'invback.dat',
        'chatback.dat',
        'mapback.dat',
        'backbase1.dat',
        'backbase2.dat',
        'backhmid1.dat',
        'sideicons.dat',
        'compass.dat',
        'mapedge.dat',
        'mapscene.dat',
        'mapfunction.dat',
        'hitmarks.dat',
        'headicons.dat',
        'headicons_pk.dat',
        'headicons_hint.dat',
        'headicons_prayer.dat',
        'mapmarker.dat',
        'cross.dat',
        'mapdots.dat',
        'scrollbar.dat',
        'redstone1.dat',
        'redstone2.dat',
        'redstone3.dat',
        'mod_icons.dat',
        'backleft1.dat',
        'backleft2.dat',
        'backright1.dat',
        'backright2.dat',
        'backtop1.dat',
        'backtop2.dat', // 225
        'mapflag.dat', // 225
        'gnomeball_buttons.dat',
        'backvmid1.dat',
        'backvmid2.dat',
        'backvmid3.dat',
        'backhmid2.dat',
        'tradebacking.dat',
        'steelborder.dat',
        'miscgraphics.dat',
        'steelborder2.dat',
        'combatboxes.dat',
        'leftarrow.dat',
        'rightarrow.dat',
        'sworddecor.dat',
        'combaticons.dat',
        'combaticons2.dat',
        'combaticons3.dat',
        'prayeron.dat',
        'wornicons.dat',
        'miscgraphics3.dat',
        'staticons.dat',
        'staticons2.dat',
        'magicoff.dat',
        'magicon.dat',
        'magicoff2.dat',
        'magicon2.dat',
        'overlay_multiway.dat',
        'miscgraphics2.dat',
        'prayerglow.dat',
        'prayeroff.dat',
        'chest.dat',
        'coins.dat',
        'number_button.dat',
        'tex_brown.dat',
        'keys.dat',
        'tex_red.dat',
        'model_version',
        'anim_version',
        'midi_version',
        'map_version',
        'model_crc',
        'anim_crc',
        'midi_crc',
        'map_crc',
        'model_index',
        'map_index',
        'anim_index',
        'midi_index',
        '0.dat',
        '1.dat',
        '2.dat',
        '3.dat',
        '4.dat',
        '5.dat',
        '6.dat',
        '7.dat',
        '8.dat',
        '9.dat',
        '10.dat',
        '11.dat',
        '12.dat',
        '13.dat',
        '14.dat',
        '15.dat',
        '16.dat',
        '17.dat',
        '18.dat',
        '19.dat',
        '20.dat',
        '21.dat',
        '22.dat',
        '23.dat',
        '24.dat',
        '25.dat',
        '26.dat',
        '27.dat',
        '28.dat',
        '29.dat',
        '30.dat',
        '31.dat',
        '32.dat',
        '33.dat',
        '34.dat',
        '35.dat',
        '36.dat',
        '37.dat',
        '38.dat',
        '39.dat',
        '40.dat',
        '41.dat',
        '42.dat',
        '43.dat',
        '44.dat',
        '45.dat',
        '46.dat',
        '47.dat',
        '48.dat',
        '49.dat',
        '50.dat',
        'fragmentsenc.txt',
        'badenc.txt',
        'domainenc.txt',
        'tldlist.txt',
        'sounds.dat',
        'button_brown.dat',
        'pen.dat',
        'blackmark.dat',
        'flo2.dat',
        'button_brown_big.dat',
        'sideicons2.dat',
        'button_red.dat',
        'optionicons3.dat',
        'hiticons.dat',
        'optionicons.dat',
        'leftarrow_small.dat',
        'rightarrow_small.dat',
        'startgame.dat',
        'emotesoff.dat',
        'varbit.idx',
        'flo.idx',
        'fragmentscenc.txt',
        'overlay_duel.dat',
        'emoteicons.dat',
        'lunaron.dat',
        'varp.idx',
        'idk.idx',
        'titlescroll.dat',
        'lunaroff.dat',
        'screenframe.dat',
        'optionicons2.dat',
        'letter.dat',
        'spotanim.idx',
        'attack.dat',
        'clanchat.dat',
        'key.dat',
        'seq.idx',
        /// specific to 194:
        'base_head.dat',
        'base_type.dat',
        'base_label.dat',
        'frame_head.dat',
        'frame_tran1.dat',
        'frame_tran2.dat',
        'frame_del.dat',
        'ob_head.dat',
        'ob_face1.dat',
        'ob_face2.dat',
        'ob_face3.dat',
        'ob_face4.dat',
        'ob_face5.dat',
        'ob_point1.dat',
        'ob_point2.dat',
        'ob_point3.dat',
        'ob_point4.dat',
        'ob_point5.dat',
        'ob_vertex1.dat',
        'ob_vertex2.dat',
        'ob_axis.dat',
        // fonts
        'p11.dat',
        'p12.dat',
        'b12.dat',
        'q8.dat',
        'sideicons1.dat',
        'sideicons2.dat',
    ];
    
    const ARCHIVES = [ 'config', 'interface', 'media', 'models', 'textures', 'title', 'wordenc', 'sounds' ];
    
    let FILE_HASHES = [];
    FILE_HASH_NAMES.map(x => {
        FILE_HASHES.push(FileArchive.genHash(x).toString());
    });

    ARCHIVES.map(x => {
        let archive = new FileArchive(ByteBuffer.fromFile('data/cache/archives/' + x));
        let archiveStats = fs.statSync('data/cache/archives/' + x);
        const dumpFolder = 'dump/archive/' + x;
        if (!fs.existsSync(dumpFolder)) {
            fs.mkdirSync(dumpFolder, { recursive: true });
        }
        Object.keys(archive.files).map(y => {
            let match = FILE_HASHES.indexOf(y);
            let name = y;
            let nameIsHash = true;
            if (match !== -1) {
                name = FILE_HASH_NAMES[match];
                nameIsHash = false;
            }
            fs.writeFileSync(dumpFolder + '/' + name, archive.read(name, nameIsHash).raw);
            fs.utimesSync(dumpFolder + '/' + name, archiveStats.mtime, archiveStats.mtime);
        });
    });
}

if (!fs.existsSync('dump/archive')) {
    fs.mkdirSync('dump/archive', { recursive: true });
    extractArchives();
}
